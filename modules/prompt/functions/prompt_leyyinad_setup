# vim:ft=zsh ts=2 sw=2 sts=2
#
# based on agnoster's Theme - https://gist.github.com/3712874
# A Powerline-inspired theme for ZSH

#    "user": { "fg": "white", "bg": "darkblue", "attr": ["bold"] },
#    "superuser": { "fg": "white", "bg": "brightred", "attr": ["bold"] },
#    "virtualenv": { "fg": "white", "bg": "darkcyan" },
#    "branch": { "fg": "gray9", "bg": "gray2" },
#    "branch_dirty": { "fg": "brightyellow", "bg": "gray2" },
#    "branch_clean": { "fg": "gray9", "bg": "gray2" },
#    "cwd": { "fg": "gray9", "bg": "gray4" },
#    "cwd:current_folder": { "fg": "gray10", "bg": "gray4", "attr": ["bold"] },
#    "cwd:divider": { "fg": "gray7", "bg": "gray4" },
#    "hostname": { "fg": "brightyellow", "bg": "mediumorange" },
#    "exit_fail": { "fg": "white", "bg": "darkestred" },
#    "exit_success": { "fg": "white", "bg": "darkestgreen" },
#    "environment": { "fg": "white", "bg": "darkestgreen" }

# 1 superuser ?
# 2 user@host (ssh) ?
# 3 branch ?
# 4 cwd
# 5 exit
# 6 rbenv ?
# 7 virtualenv ?
# 8 nodeenv ?

start_time=$SECONDS
function prompt_leyyinad_preexec {
  start_time=$SECONDS
}

CURRENT_BG='NONE'
SEGMENT_SEPARATOR=''

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  local user=`whoami`

  if [[ -n "$SSH_CLIENT" ]]; then
    prompt_segment 166 220 "%(!.%{%F{yellow}%}.) %m"
  fi

  if [[ "$user" != "${DEFAULT_USER:-$user}" ]]; then
    prompt_segment 31 white "%(!.%{%F{yellow}%}.)$user"
  fi
}

function prompt_git {
  #if [[ -n $dirty ]]; then
  #  prompt_segment 94 214
  #else
  #  prompt_segment 22 70
  #fi

  if [[ -n $git_info ]]; then
    if [[ -n ${git_info[clean]} ]]; then
      prompt_segment 22 70 "${(e)git_info[prompt]}${git_info[status]}"
    else
      prompt_segment 94 214 "${(e)git_info[prompt]}${git_info[status]}"
    fi
  fi
}

# Dir: current working directory
prompt_dir() {
  local pwd="${PWD/#$HOME/~}"
  local dir

  if [[ "$pwd" == (#m)[/~] ]]; then
    dir="$MATCH"
    unset MATCH
  else
    dir="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi

  prompt_segment 236 245 $dir
}

# Virtualenv: current working virtualenv
prompt_virtualenv() {
  local virtualenv_path="$VIRTUAL_ENV"
  if [[ -n $virtualenv_path && -n $VIRTUAL_ENV_DISABLE_PROMPT ]]; then
    prompt_segment 231 74 "(`basename $virtualenv_path`)"
  fi
}

# rbenv: current ruby environment
prompt_rbenv() {
  local ruby_version="system"
  type current_ruby &>/dev/null && ruby_version=$(current_ruby)

  if [[ "$ruby_version" != "system" ]]; then
    #prompt_segment 231 74 "$ruby_version"
    prompt_segment 74 231 "$ruby_version"
  fi
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
function prompt_status {
  local symbols
  symbols=()
  [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}✘"
  [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}⚡"
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}⚙"

  [[ -n "$symbols" ]] && prompt_segment black default "$symbols"
}

## Main prompt
function build_prompt {
  RETVAL=$?
  prompt_status
  prompt_virtualenv
  prompt_rbenv
  prompt_context
  prompt_dir
  prompt_git
  #prompt_hg
  prompt_end
}

function calc_elapsed_time {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -gt 10 ]]; then
    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
  fi
}

function prompt_leyyinad_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi
  timer_result=$(($SECONDS-$start_time))
  if [[ $timer_result -gt 10 ]]; then
    calc_elapsed_time
  fi
  start_time=$SECONDS
}


function prompt_leyyinad_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_leyyinad_preexec
  add-zsh-hook precmd prompt_leyyinad_precmd

  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '! %s'
  zstyle ':prezto:module:git:info:added' format ' ✚'
  zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  zstyle ':prezto:module:git:info:behind' format ' ⬇'
  zstyle ':prezto:module:git:info:branch' format '⭠ %b'
  zstyle ':prezto:module:git:info:clean' format '1'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ✖'
  zstyle ':prezto:module:git:info:modified' format ' ✱'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ➙'
  zstyle ':prezto:module:git:info:stashed' format ' s'
  zstyle ':prezto:module:git:info:unmerged' format ' ═'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'prompt' '$(coalesce "%b" "%p" "%c")%s' \
    'status' '%A%B%S%a%d%m%r%U%u' \
    'clean'  '%C'

  # Define prompts.
  PROMPT='%{%f%b%k%}$(build_prompt) '
  #RPROMPT='[%D{%L:%M:%S %p}]'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_leyyinad_setup "$@"

